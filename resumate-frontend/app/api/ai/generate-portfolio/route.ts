import { NextRequest, NextResponse } from 'next/server'
import { readSession } from '@/lib/session'

export const dynamic = 'force-dynamic'

interface PortfolioGenerationRequest {
  fullName: string
  title: string
  theme: string
  tagline?: string
  skills?: string
  experience?: string
}

const themePrompts = {
  modern: "modern, clean, and contemporary style with sleek typography and minimalist design",
  minimal: "minimal and elegant with lots of white space, simple layouts, and subtle typography",
  creative: "bold, artistic, and visually striking with creative layouts and vibrant elements",
  professional: "corporate, formal, and business-focused with traditional layouts and conservative design",
  dark: "dark mode aesthetic with dark backgrounds, light text, and modern contrast",
  colorful: "vibrant, energetic, and colorful with dynamic gradients and engaging visual elements"
}

export async function POST(req: NextRequest) {
  const session = await readSession()
  if (!session) return NextResponse.json({ success: false, message: 'Unauthorized' }, { status: 401 })
  
  try {
    const body: PortfolioGenerationRequest = await req.json()
    const { fullName, title, theme, tagline, skills, experience } = body
    
    if (!fullName || !title) {
      return NextResponse.json({ 
        success: false, 
        message: 'Full name and title are required' 
      }, { status: 400 })
    }

    const apiKey = process.env.GEMINI_API_KEY
    if (!apiKey) {
      return NextResponse.json({ 
        success: false, 
        message: 'AI service not available' 
      }, { status: 503 })
    }

    const themeDescription = themePrompts[theme as keyof typeof themePrompts] || themePrompts.modern
    
    const prompt = `Create comprehensive portfolio content for ${fullName}, a professional with the title "${title}".

Theme: ${theme} - ${themeDescription}

Context:
- Name: ${fullName}
- Professional Title: ${title}
${tagline ? `- Tagline: ${tagline}` : ''}
${skills ? `- Current Skills: ${skills}` : ''}
${experience ? `- Experience Overview: ${experience}` : ''}

Generate detailed, professional content for a portfolio website with the following sections. Make the content engaging, specific, and tailored to the ${theme} theme. Use markdown formatting where appropriate:

1. **tagline**: A compelling 1-2 line professional tagline (if not provided)
2. **bio**: A brief 2-3 sentence introduction for the hero section
3. **about**: A comprehensive "About Me" section (3-4 paragraphs) that tells their professional story
4. **experience**: Professional work experience with realistic job titles, companies, and achievements (3-4 positions)
5. **projects**: 4-5 notable projects with descriptions, technologies used, and key outcomes
6. **skills**: Organized technical and soft skills relevant to their field
7. **achievements**: Professional accomplishments, awards, or recognition
8. **services**: Services they might offer as a professional
9. **testimonials**: 2-3 realistic client/colleague testimonials with names and titles
10. **contact**: Professional contact section content
11. **metaDescription**: SEO-friendly meta description (max 150 characters)
12. **metaKeywords**: Relevant keywords for SEO

Make the content:
- Professional yet personable
- Specific to their field and expertise
- Optimized for the ${theme} theme aesthetic
- Rich with relevant industry terminology
- Engaging and conversion-focused

Return ONLY a valid JSON object with these fields. Do not include any explanatory text outside the JSON.`

    const response = await fetch('https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=' + apiKey, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        contents: [{
          parts: [{
            text: prompt
          }]
        }],
        generationConfig: {
          temperature: 0.7,
          topK: 40,
          topP: 0.95,
          maxOutputTokens: 4096,
        }
      })
    })

    if (!response.ok) {
      throw new Error('AI service request failed')
    }

    const aiResponse = await response.json()
    const aiText = aiResponse.candidates?.[0]?.content?.parts?.[0]?.text

    if (!aiText) {
      throw new Error('No content generated by AI')
    }

    // Parse the JSON response from AI
    let portfolioData
    try {
      // Clean the response in case there's markdown formatting
      const cleanedText = aiText.replace(/```json\n?/g, '').replace(/```\n?/g, '').trim()
      portfolioData = JSON.parse(cleanedText)
    } catch (parseError) {
      console.error('AI JSON parse error:', parseError)
      console.error('AI raw response:', aiText)
      throw new Error('Invalid AI response format')
    }

    return NextResponse.json({ 
      success: true, 
      data: portfolioData 
    })

  } catch (error: any) {
    console.error('Portfolio AI generation error:', error)
    return NextResponse.json({ 
      success: false, 
      error: error.message || 'Generation failed' 
    }, { status: 500 })
  }
}